{{- if and .Values.logging.enabled .Values.logging.kibana.enabled -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "kibana.uname" . }}-helm-scripts
  labels: {{ include "kibana.labels" . | nindent 4 }}
  # {{- if .Values.logging.kibana.annotations }}
  # {{- range $key, $value := .Values.logging.kibana.annotations }}
  # {{ $key }}: {{ $value | quote }}
  # {{- end }}
  # {{- end }}
data:
  manage-es-token.js: |
    const https = require('https');
    const fs = require('fs');

    // Read environment variables
    function getEnvVar(name) {
      if (!process.env[name]) {
        throw new Error(name + ' environment variable is missing')
      }
      return process.env[name]
    }

    // Elasticsearch API
    const esPath = '_security/service/elastic/kibana/credential/token/{{ include "kibana.uname" . }}';
    const esUrl = getEnvVar('ELASTICSEARCH_HOSTS') + '/' + esPath
    const esUsername = getEnvVar('ELASTICSEARCH_USERNAME');
    const esPassword = getEnvVar('ELASTICSEARCH_PASSWORD');
    const esAuth = esUsername + ':' + esPassword;
    const esCaFile = getEnvVar('ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES');
    const esCa = fs.readFileSync(esCaFile);

    // Kubernetes API
    const k8sHostname = getEnvVar('KUBERNETES_SERVICE_HOST');
    const k8sPort = getEnvVar('KUBERNETES_SERVICE_PORT_HTTPS');
    const k8sPostSecretPath = 'api/v1/namespaces/{{ .Release.Namespace }}/secrets';
    const k8sDeleteSecretPath = 'api/v1/namespaces/{{ .Release.Namespace }}/secrets/{{ include "kibana.uname" . }}-es-token';
    const k8sPostSecretUrl = `https://${k8sHostname}:${k8sPort}/${k8sPostSecretPath}`;
    const k8sDeleteSecretUrl = `https://${k8sHostname}:${k8sPort}/${k8sDeleteSecretPath}`;
    const k8sBearer = fs.readFileSync('/run/secrets/kubernetes.io/serviceaccount/token');
    const k8sCa = fs.readFileSync('/run/secrets/kubernetes.io/serviceaccount/ca.crt');

    // Post Data
    const esTokenDeleteOptions = {
      method: 'DELETE',
      auth: esAuth,
      ca: esCa,
    };
    const esTokenCreateOptions = {
      method: 'POST',
      auth: esAuth,
      ca: esCa,
    };
    const secretCreateOptions = {
      method: 'POST',
      ca: k8sCa,
      headers: {
        'Authorization': 'Bearer ' + k8sBearer,
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      }
    };
    const secretDeleteOptions = {
      method: 'DELETE',
      ca: k8sCa,
      headers: {
        'Authorization': 'Bearer ' + k8sBearer,
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      }
    };

    // With thanks to https://stackoverflow.com/questions/57332374/how-to-chain-http-request
    function requestPromise(url, httpsOptions, extraOptions = {}) {
      return new Promise((resolve, reject) => {
        const request = https.request(url, httpsOptions, response => {

          console.log('statusCode:', response.statusCode);

          let isSuccess = undefined;

          if (typeof(extraOptions.extraStatusCode) != "undefined" && extraOptions.extraStatusCode != null) {
            isSuccess = response.statusCode >= 200 && response.statusCode < 300 || response.statusCode == extraOptions.extraStatusCode;
          } else {
            isSuccess = response.statusCode >= 200 && response.statusCode < 300;
          }

          let data = '';
          response.on('data', chunk => data += chunk); // accumulate data
          response.once('end', () => isSuccess ? resolve(data) : reject(data));  // resolve promise here
        });

        request.once('error', err => {
          // This won't log anything for e.g. an HTTP 404 or 500 response,
          // since from HTTP's point-of-view we successfully received a
          // response.
          console.log(`${httpsOptions.method} ${httpsOptions.path} failed: `, err.message || err);
          reject(err);  // if promise is not already resolved, then we can reject it here
        });

        if (typeof(extraOptions.payload) != "undefined") {
          request.write(extraOptions.payload);
        }
        request.end();
      });
    }

    // 检查并删除 K8s Secret (如果存在)
    function deleteK8sSecretIfExists() {
      return new Promise((resolve, reject) => {
        console.log('检查 K8s Secret 是否存在...');
        const request = https.request(k8sDeleteSecretUrl, {
          method: 'GET',
          ca: k8sCa,
          headers: {
            'Authorization': 'Bearer ' + k8sBearer,
          }
        }, response => {
          if (response.statusCode === 200) {
            console.log('Secret 存在，删除中...');
            requestPromise(k8sDeleteSecretUrl, secretDeleteOptions, {extraStatusCode: 404})
              .then(() => {
                console.log('Secret 删除成功');
                resolve();
              })
              .catch(err => {
                console.log('Secret 删除失败，但继续处理: ', err);
                resolve(); // 即使删除失败也继续
              });
          } else if (response.statusCode === 404) {
            console.log('Secret 不存在，可以直接创建');
            resolve();
          } else {
            console.log('检查 Secret 存在性失败: ', response.statusCode);
            resolve(); // 继续处理
          }
        });
        
        request.once('error', err => {
          console.log('检查 Secret 存在性出错: ', err.message || err);
          resolve(); // 出错时也继续
        });
        
        request.end();
      });
    }

    function createEsToken() {
      // 先删除现有 Secret
      return deleteK8sSecretIfExists().then(() => {
        // 清理之前的 Elasticsearch token
        console.log('Cleaning previous token');
        // 404 status code is accepted if there is no previous token to clean
        return requestPromise(esUrl, esTokenDeleteOptions, {extraStatusCode: 404}).then(() => {
          console.log('Creating new token');
          return requestPromise(esUrl, esTokenCreateOptions).then(response => {
            const body = JSON.parse(response);
            const token = body.token.value

            // Encode the token in base64
            const base64Token = Buffer.from(token, 'utf8').toString('base64');

            // Prepare the k8s secret
            const secretData = JSON.stringify({
              "apiVersion": "v1",
              "kind": "Secret",
              "metadata": {
                "namespace": "{{ .Release.Namespace }}",
                "name": "{{ include "kibana.uname" . }}-es-token",
              },
              "type": "Opaque",
              "data": {
                "token": base64Token,
              }
            })

            // Create the k8s secret
            console.log('Creating K8S secret');
            return requestPromise(k8sPostSecretUrl, secretCreateOptions, {payload: secretData})
          });
        });
      });
    }

    function cleanEsToken() {
      console.log('Cleaning Kibana token from Elasticsearch and Kubernetes');
      
      // 首先删除 Kubernetes 中的 Secret，确保即使 Elasticsearch 不可用也能清理 Secret
      const deleteK8sSecret = () => {
        console.log('Deleting K8S secret...');
        return requestPromise(k8sDeleteSecretUrl, secretDeleteOptions, {extraStatusCode: 404})
          .then(() => {
            console.log('K8S secret deleted successfully');
            return true;
          })
          .catch(err => {
            console.log('Warning: Failed to delete K8S secret, but continuing...');
            console.log('Error details:', err);
            return false;
          });
      };
      
      // 尝试删除 Elasticsearch 中的 token，但允许失败
      console.log('Attempting to clean token from Elasticsearch...');
      
      // 设置一个超时，防止长时间等待 Elasticsearch 连接
      const timeoutPromise = new Promise((resolve) => {
        setTimeout(() => {
          console.log('Elasticsearch request timed out after 10 seconds');
          resolve(false);
        }, 10000);
      });
      
      // 尝试删除 Elasticsearch token
      const deleteEsTokenPromise = requestPromise(esUrl, esTokenDeleteOptions, {extraStatusCode: 404})
        .then(() => {
          console.log('Elasticsearch token deleted successfully');
          return true;
        })
        .catch(err => {
          console.log('Warning: Failed to delete Elasticsearch token, Elasticsearch may be unavailable');
          console.log('Error details:', err);
          return false;
        });
      
      // 无论 Elasticsearch 操作成功与否，都确保删除 K8s Secret
      return Promise.race([deleteEsTokenPromise, timeoutPromise])
        .then(() => {
          return deleteK8sSecret();
        })
        .then(() => {
          console.log('Cleanup completed');
          return true;
        });
    }

    const command = process.argv[2];
    switch (command) {
      case 'create':
        console.log('Creating a new Elasticsearch token for Kibana')
        createEsToken().catch(err => {
          console.error(err);
          process.exit(1);
        });
        break;
      case 'clean':
        console.log('Cleaning the Kibana Elasticsearch token')
        cleanEsToken().catch(err => {
          console.log('Error during cleanup, but continuing anyway:', err);
          // 即使出错也返回成功状态码，确保 post-delete Job 能正常完成
          process.exit(0);
        });
        break;
      default:
        console.log('Unknown command');
        process.exit(1);
    }
{{- end }}
